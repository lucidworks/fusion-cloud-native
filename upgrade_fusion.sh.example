#!/usr/bin/env bash

# This script helps you keep track of the parameters needed to upgrade a Fusion cluster in Kubernetes
# vs. having to remember all the --values parameters you need to pass
PROVIDER=<PROVIDER>
CLUSTER_NAME=<CLUSTER>
RELEASE=<RELEASE>
NAMESPACE=<NAMESPACE>
CHART_VERSION=<CHART_VERSION>
KUBECTL=<KUBECTL>
KUBECTL_TIMEOUT_PARAM=<KUBECTL_TIMEOUT_PARAM>
SKIP_CRDS=<SKIP_CRDS>

MY_VALUES=""
<BASE_CUSTOM_VALUES>
<RESOURCES_YAML>
<AFFINITY_YAML>
<REPLICAS_YAML>
<ADDITIONAL_VALUES>
# TODO: append more --values <file> args here as needed for your installation
#MY_VALUES="${MY_VALUES} --values ${PROVIDER}_${CLUSTER_NAME}_${RELEASE}_fusion_affinity.yaml"

DRY_RUN=""
DRY_RUN_REQUESTED="${1:-}"

if [ ! -z "${DRY_RUN_REQUESTED}" ]; then
  DRY_RUN="--dry-run"
fi

current_context=$(${KUBECTL} config current-context | grep "$CLUSTER_NAME")

#Openshift doesn't include the cluster name as a part of the current context
if [[ "${current_context}" == "" && "$PROVIDER" != "oc" ]]; then
  echo -e "\nERROR: Current kubeconfig not pointing to the $CLUSTER_NAME cluster!\nPlease update your current config to the correct cluster for upgrading Fusion.\n"
  exit 1
fi

if ! ${KUBECTL} get namespace "${NAMESPACE}" > /dev/null 2>&1; then
  ${KUBECTL} create namespace "${NAMESPACE}"
  if [ "$PROVIDER" == "gke" ]; then
    who_am_i=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
  else
    who_am_i=""
  fi
  OWNER_LABEL="${who_am_i//@/-}"
  if [ "${OWNER_LABEL}" != "" ]; then
    ${KUBECTL} label namespace "${NAMESPACE}" "owner=${OWNER_LABEL}"
  fi
  echo -e "\nCreated namespace ${NAMESPACE} with owner label ${OWNER_LABEL}\n"
fi

# Make sure that the lucidworks chart repository is present and updated
lw_helm_repo=lucidworks

if ! helm repo list | grep -q "https://charts.lucidworks.com"; then
  echo -e "\nAdding the Lucidworks chart repo to helm repo list"
  helm repo add ${lw_helm_repo} https://charts.lucidworks.com
fi

helm_chart_to_use="${lw_helm_repo}/fusion"

if [ "$LOCAL_HELM_CHART" != "" ]; then
  helm_chart_to_use="${LOCAL_HELM_CHART}"
  echo "LOCAL_HELM_CHART variable was specified. Will use ${LOCAL_HELM_CHART} as the helm chart."
fi

if [ "$LOCAL_HELM_CHART" == "" ]; then
  helm repo update
fi

if [ "$PROVIDER" == "gke" ]; then
  # Make sure that the metric server is running
  metrics_deployment=$(${KUBECTL} get deployment -n kube-system | grep metrics-server | cut -d ' ' -f1 -)
  ${KUBECTL} rollout status deployment/${metrics_deployment} ${KUBECTL_TIMEOUT_PARAM}=60s --namespace "kube-system"
  echo ""
fi

echo -e "Upgrading the '$RELEASE' release (Fusion chart: ${helm_chart_to_use}, version: $CHART_VERSION) in the '$NAMESPACE' namespace in the '$CLUSTER_NAME' cluster using values:\n    ${MY_VALUES//--values}"
echo -e "\nNOTE: If this will be a long-running cluster for production purposes, you should save the following file(s) in version control:\n${MY_VALUES//--values}\n"
echo "helm upgrade ${DRY_RUN} ${RELEASE} ${helm_chart_to_use} --install --namespace ${NAMESPACE} --version ${CHART_VERSION} ${MY_VALUES}" --skip-crds
helm upgrade ${DRY_RUN} ${RELEASE} ${helm_chart_to_use} --install --namespace "${NAMESPACE}" --version "${CHART_VERSION}" ${MY_VALUES} --skip-crds

if [ "$DRY_RUN" != "--dry-run" ]; then
   echo -e "\nWaiting up to 10 minutes to see the Fusion API Gateway deployment come online ...\n"
   ${KUBECTL} rollout status deployment/${RELEASE}-api-gateway ${KUBECTL_TIMEOUT_PARAM}=600s --namespace "${NAMESPACE}"
   echo -e "\nWaiting up to 5 minutes to see the Fusion Indexing deployment come online ...\n"
   ${KUBECTL} rollout status deployment/${RELEASE}-fusion-indexing ${KUBECTL_TIMEOUT_PARAM}=300s --namespace "${NAMESPACE}"

   current_ns=$(${KUBECTL} config view --minify --output 'jsonpath={..namespace}')
   if [ "$NAMESPACE" != "$current_ns" ]; then
     ${KUBECTL} config set-context --current --namespace=${NAMESPACE}
   fi
fi

echo ""
helm ls
echo ""
