global:
  zkReplicaCount: {ZK_REPLICAS}

sql-service:
  enabled: false
  nodeSelector:
    {NODE_POOL}
  replicaCount: 0
  service:
    thrift:
      type: "ClusterIP"

solr:
  nodeSelector:
    {NODE_POOL}
  image:
    tag: 8.4.1
  updateStrategy:
    type: "RollingUpdate"
  javaMem: "-Xmx2g -Dfusion_node_type=system"
  solrGcTune: "-XX:+UseG1GC -XX:-OmitStackTraceInFastThrow -XX:+UseStringDeduplication -XX:+PerfDisableSharedMem -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=150 -XX:+UseLargePages -XX:+AlwaysPreTouch"
  volumeClaimTemplates:
    storageSize: "{SOLR_DISK_GB}Gi"
  replicaCount: {SOLR_REPLICAS}
  resources: {}
  exporter:
    enabled: {PROMETHEUS}
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9983"
      prometheus.io/path: "/metrics"
    nodeSelector:
      {NODE_POOL}

zookeeper:
  nodeSelector:
    {NODE_POOL}
  replicaCount: {ZK_REPLICAS}
  persistence:
    size: 15Gi
  resources: {}
  env:
    ZK_HEAP_SIZE: 1G
    ZK_PURGE_INTERVAL: 1

ml-model-service:
  image:
    imagePullPolicy: "IfNotPresent"
  nodeSelector:
    {NODE_POOL}
  modelRepoImpl: fusion
  fs:
    enabled: true

fusion-admin:
  nodeSelector:
    {NODE_POOL}
  readinessProbe:
    initialDelaySeconds: 100

fusion-indexing:
  nodeSelector:
    {NODE_POOL}
  readinessProbe:
    initialDelaySeconds: 100
  pod:
    annotations:
      prometheus.io/port: "8765"
      prometheus.io/scrape: "true"
      prometheus.io/path: "/actuator/prometheus"

query-pipeline:
  nodeSelector:
    {NODE_POOL}
  javaToolOptions: "-Xmx3g -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -Dserver.jetty.max-threads=500 -Dhttp.maxConnections=1000"
  livenessProbe:
    failureThreshold: 10
    httpGet:
      path: /actuator/health
      port: jetty
      scheme: HTTP
    initialDelaySeconds: 45
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 3
  readinessProbe:
    failureThreshold: 10
    httpGet:
      path: /actuator/health
      port: jetty
      scheme: HTTP
    initialDelaySeconds: 45
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 3
  pod:
    annotations:
      prometheus.io/port: "8787"
      prometheus.io/scrape: "true"
      prometheus.io/path: "/actuator/prometheus"

admin-ui:
  nodeSelector:
    {NODE_POOL}

api-gateway:
  service:
    externalTrafficPolicy: "Local"
  nodeSelector:
    {NODE_POOL}
  javaToolOptions: "-Xms2g -Xmx2g -Djwt.token.user-cache-size=100"
  pod:
    annotations:
      prometheus.io/port: "6764"
      prometheus.io/scrape: "true"
      prometheus.io/path: "/actuator/prometheus"

auth-ui:
  nodeSelector:
    {NODE_POOL}

classic-rest-service:
  nodeSelector:
    {NODE_POOL}

devops-ui:
  nodeSelector:
    {NODE_POOL}

fusion-resources:
  nodeSelector:
    {NODE_POOL}

insights:
  nodeSelector:
    {NODE_POOL}

job-launcher:
  nodeSelector:
    {NODE_POOL}

job-rest-server:
  nodeSelector:
    {NODE_POOL}

logstash:
  nodeSelector:
    {NODE_POOL}

rest-service:
  nodeSelector:
    {NODE_POOL}

rpc-service:
  nodeSelector:
    {NODE_POOL}

rules-ui:
  nodeSelector:
    {NODE_POOL}

webapps:
  livenessProbe:
    initialDelaySeconds: 60
  javaToolOptions: "-Xmx1g -Dspring.zipkin.enabled=false -Dspring.sleuth.enabled=false"
  nodeSelector:
    {NODE_POOL}

fusion-jupyter:
  enabled: false

pulsar:
  broker:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
  bookkeeper:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8000"
